generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(cuid())
    email     String?   @unique
    name      String?
    image     String?
    accounts  Account[]
    sessions  Session[]
    projects  Project[]
    createdAt DateTime  @default(now())
}

model Project {
    id          String        @id @default(cuid())
    userId      String
    user        User          @relation(fields: [userId], references: [id])
    name        String
    description String?
    status      ProjectStatus @default(ACTIVE)
    createdAt   DateTime      @default(now())
    tasks       Task[]

    @@index([userId, status])
}

enum ProjectStatus {
    ACTIVE
    ARCHIVED
}

model Task {
    id          String      @id @default(cuid())
    projectId   String
    project     Project     @relation(fields: [projectId], references: [id])
    name        String
    description String?
    createdAt   DateTime    @default(now())
    timeEntries TimeEntry[]

    @@index([projectId])
}

model TimeEntry {
    id        String    @id @default(cuid())
    taskId    String
    task      Task      @relation(fields: [taskId], references: [id])
    startTime DateTime
    endTime   DateTime?
    manual    Boolean   @default(false)
    createdAt DateTime  @default(now())

    @@index([taskId, startTime, endTime])
}

// NextAuth adapter models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
